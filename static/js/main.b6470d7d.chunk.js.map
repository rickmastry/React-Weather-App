{"version":3,"sources":["components/Titles.js","components/Form.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Titles","react_default","a","createElement","className","Form","props","onSubmit","getWeather","type","name","placeholder","Weather","city","country","temperature","humidity","description","wind","error","API_KEY","App","state","undefined","_callee","e","api_call","data","regenerator_default","wrap","_context","prev","next","preventDefault","target","elements","value","fetch","concat","sent","json","_this","setState","main","temp","weather","speed","sys","stop","this","components_Titles","components_Form","components_Weather","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b6470d7d.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Titles = () => (\r\n    <div>\r\n        <h1 className=\"title-container__title\">Weather Finder</h1>\r\n        <h3 className=\"title-container__subtitle\">Find out temperature, conditions and more...</h3>\r\n    </div>\r\n);\r\n\r\n\r\n\r\nexport default Titles;","import React from 'react';\r\n\r\n\r\nconst Form = props => (\r\n    <form onSubmit={props.getWeather}>\r\n        <input type=\"text\" name=\"city\" placeholder=\"City...\"/>\r\n        <input type=\"text\" name=\"country\" placeholder=\"Country...\"/>\r\n        <button>Get Weather</button>\r\n    </form>\r\n);\r\n\r\n\r\nexport default Form;","import React from \"react\";\r\n\r\nconst Weather = props => (\r\n    <div className=\"weather__info\">\r\n        {\r\n        props.city && props.country && <p className=\"weather__key\">Location:\r\n            <span className=\"weather__value\"> {props.city}, {props.country}</span></p>\r\n        }\r\n\r\n        {\r\n        props.temperature && <p className=\"weather__key\">Temperature: \r\n            <span className=\"weather__value\"> {props.temperature}</span></p>\r\n        }\r\n\r\n        {\r\n        props.humidity && <p className=\"weather__key\">Humidity:\r\n            <span className=\"weather__value\"> {props.humidity}%</span></p>\r\n        } \r\n\r\n        {\r\n        props.description && <p className=\"weather__key\">Conditions:\r\n            <span className=\"weather__value\"> {props.description}</span></p>\r\n        }\r\n\r\n        {\r\n        props.wind && <p className=\"weather__key\">Wind:\r\n            <span className=\"weather__value\"> {props.wind} MPH</span></p>\r\n        }\r\n\r\n        {\r\n        props.error && <p className=\"weather__key\">{props.error}</p>\r\n        }\r\n    </div>\r\n\r\n\r\n);\r\n\r\n\r\n\r\n\r\n\r\nexport default Weather;","import React, { Component } from 'react';\nimport './App.css';\nimport Titles from './components/Titles';\nimport Form from './components/Form';\nimport Weather from './components/Weather';\n\nconst API_KEY = \"12241415d524d01764933c495c975d27\";\n\nclass App extends Component {\n  state = {\n    temperature: undefined,\n    humidity: undefined,\n    description: undefined,\n    wind: undefined,\n    city: undefined,\n    country: undefined,\n    error: undefined\n\n  }\n  getWeather = async (e) => {\n    e.preventDefault();\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.city.value;\n    const api_call = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&APPID=${API_KEY}&units=Imperial`);\n    const data = await api_call.json();\n    if(city && country){\n      this.setState({\n        temperature: data.main.temp,\n        humidity: data.main.humidity,\n        description: data.weather[0].description,\n        wind: data.wind.speed,\n        city: data.name,\n        country: data.sys.country,\n        error:\"\"\n       \n      });\n    } else{\n       \n      this.setState ({\n        temperature: undefined,\n        humidity: undefined,\n        description: undefined,\n        wind: undefined,\n        city: undefined,\n        country: undefined,\n        error: \"Please enter city and country\"\n    \n      });\n    }\n   \n    \n  }\n  render() {\n    return (\n     <div>\n      <div className=\"wrapper\">\n        <div className=\"main\">\n         <div className=\"container-fluid\">\n          <div className=\"row\">\n            <div className=\"col-5 title-container\">\n              <Titles />\n            </div>\n            <div className=\"col-7 form-container\">\n              <Form getWeather={this.getWeather}/>\n              <Weather \n                temperature={this.state.temperature}\n                humidity={this.state.humidity}\n                description={this.state.description}\n                wind={this.state.wind}\n                city={this.state.city}\n                country={this.state.country}\n                error={this.state.error}\n              />\n           </div>\n          </div>\n         </div>\n        </div>\n      </div>\n     </div>\n    );\n  }\n};\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}